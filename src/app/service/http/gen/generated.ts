//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { Observable as Obs, of as OfObservable } from 'rxjs';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export class BaseClient {
  protected transformOptions(opt: any): Obs<any> {
    opt.responseType = 'json';
    return OfObservable(opt);
  }
}

@Injectable({
    providedIn: 'root'
})
export class AuthorClient extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Find authors
     * @param id (optional) array of authors id to find

    @gotags: form:"id" validate:"primitiveid,required_without_all=Translit"
     * @param translit (optional) array of translit names to find

    @gotags: form:"translit" validate:"required_without_all=Id"
     * @return A successful response.
     */
    getAuthors(id: string[] | null | undefined, translit: string[] | null | undefined): Observable<AuthorsGetAuthorsResponse> {
        let url_ = this.baseUrl + "/api/v1/authors?";
        if (id !== undefined && id !== null)
            id && id.forEach(item => { url_ += "id=" + encodeURIComponent("" + item) + "&"; });
        if (translit !== undefined && translit !== null)
            translit && translit.forEach(item => { url_ += "translit=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAuthors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuthors(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthorsGetAuthorsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthorsGetAuthorsResponse>;
        }));
    }

    protected processGetAuthors(response: HttpResponseBase): Observable<AuthorsGetAuthorsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorsGetAuthorsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Find authors list
     * @param query (optional) query to find

    @gotags: form:"query" validate:"required"
     * @param limit (optional) max objects to find

    @gotags: form:"limit" validate:"required,gte=1,lte=50"
     * @param page (optional) page to find

    @gotags: form:"page" validate:"gte=0"
     * @param rating (optional) rating to find

    @gotags: form:"rating" validate:"gte=0,lte=5"
     * @return A successful response.
     */
    findAuthors(query: string | null | undefined, limit: number | null | undefined, page: number | null | undefined, rating: number | null | undefined): Observable<AuthorsGetAuthorsResponse> {
        let url_ = this.baseUrl + "/api/v1/authors/list?";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (page !== undefined && page !== null)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (rating !== undefined && rating !== null)
            url_ += "rating=" + encodeURIComponent("" + rating) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processFindAuthors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindAuthors(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthorsGetAuthorsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthorsGetAuthorsResponse>;
        }));
    }

    protected processFindAuthors(response: HttpResponseBase): Observable<AuthorsGetAuthorsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorsGetAuthorsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }
}

@Injectable({
    providedIn: 'root'
})
export class BookClient extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Get book by id
     * @param query (optional) book's translit name or id to find

    @gotags: form:"query" validate:"required"
     * @return A successful response.
     */
    getBook(query: string | null | undefined): Observable<BooksGetBookResponse> {
        let url_ = this.baseUrl + "/api/v1/book?";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetBook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBook(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooksGetBookResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooksGetBookResponse>;
        }));
    }

    protected processGetBook(response: HttpResponseBase): Observable<BooksGetBookResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooksGetBookResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Create book
     * @return A successful response.
     */
    createBook(body: BooksCreateBookRequest): Observable<BooksCreateBookResponse> {
        let url_ = this.baseUrl + "/api/v1/book";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateBook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateBook(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooksCreateBookResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooksCreateBookResponse>;
        }));
    }

    protected processCreateBook(response: HttpResponseBase): Observable<BooksCreateBookResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooksCreateBookResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Find book by query
     * @param query (optional) query to find

    @gotags: form:"query" validate:"max=128"
     * @param limit (optional) max objects to find

    @gotags: form:"limit" validate:"required,gte=1,lte=50"
     * @param page (optional) page to find

    @gotags: form:"page" validate:"gte=0"
     * @param rating (optional) minimum rating to find

    @gotags: form:"rating" validate:"gte=0,lte=5"
     * @param sorttype (optional) @gotags: form:"sorttype" validate:"oneof=Popular Newest"
     * @return A successful response.
     */
    findBook(query: string | null | undefined, limit: number | null | undefined, page: number | null | undefined, rating: number | null | undefined, sorttype: string | null | undefined): Observable<BooksFindBookResponse> {
        let url_ = this.baseUrl + "/api/v1/book/find?";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (page !== undefined && page !== null)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (rating !== undefined && rating !== null)
            url_ += "rating=" + encodeURIComponent("" + rating) + "&";
        if (sorttype !== undefined && sorttype !== null)
            url_ += "sorttype=" + encodeURIComponent("" + sorttype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processFindBook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindBook(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooksFindBookResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooksFindBookResponse>;
        }));
    }

    protected processFindBook(response: HttpResponseBase): Observable<BooksFindBookResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooksFindBookResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Get book by genre
     * @param query (optional) Query can be translit name or genre id

    @gotags: form:"query" validate:"required"
     * @param sorttype (optional) @gotags: form:"sorttype" validate:"oneof=Popular Newest"
     * @param onlyhighrating (optional) @gotags: form:"onlyhighrating"
     * @param limit (optional) @gotags: form:"limit" validate:"gte=1,lte=50"
     * @param page (optional) @gotags: form:"page" validate:"gte=0"
     * @return A successful response.
     */
    getBookByGenre(query: string | null | undefined, sorttype: string | null | undefined, onlyhighrating: boolean | null | undefined, limit: number | null | undefined, page: number | null | undefined): Observable<BooksGetBookByGenreResponse> {
        let url_ = this.baseUrl + "/api/v1/book/genre?";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (sorttype !== undefined && sorttype !== null)
            url_ += "sorttype=" + encodeURIComponent("" + sorttype) + "&";
        if (onlyhighrating !== undefined && onlyhighrating !== null)
            url_ += "onlyhighrating=" + encodeURIComponent("" + onlyhighrating) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (page !== undefined && page !== null)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetBookByGenre(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookByGenre(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooksGetBookByGenreResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooksGetBookByGenreResponse>;
        }));
    }

    protected processGetBookByGenre(response: HttpResponseBase): Observable<BooksGetBookByGenreResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooksGetBookByGenreResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Find authors list
     * @param id (optional) array of authors id to find

    @gotags: form:"id" validate:"primitiveid,required_without_all=Translit"
     * @param translit (optional) array of translit names to find

    @gotags: form:"translit" validate:"required_without_all=Id"
     * @return A successful response.
     */
    getBookList(id: string[] | null | undefined, translit: string[] | null | undefined): Observable<BooksGetBookListResponse> {
        let url_ = this.baseUrl + "/api/v1/book/list?";
        if (id !== undefined && id !== null)
            id && id.forEach(item => { url_ += "id=" + encodeURIComponent("" + item) + "&"; });
        if (translit !== undefined && translit !== null)
            translit && translit.forEach(item => { url_ += "translit=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetBookList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooksGetBookListResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooksGetBookListResponse>;
        }));
    }

    protected processGetBookList(response: HttpResponseBase): Observable<BooksGetBookListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooksGetBookListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }
}

@Injectable({
    providedIn: 'root'
})
export class FileClient extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Get's book's epub file
     * @param fileName (optional) @gotags: validate:"required" example:"bible-231125.epub"

    Name of file to find with extension
     * @return A successful response.
     */
    getBookFile(fileName: string | null | undefined): Observable<FilesFileResponse> {
        let url_ = this.baseUrl + "/api/v1/files/book?";
        if (fileName !== undefined && fileName !== null)
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetBookFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FilesFileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FilesFileResponse>;
        }));
    }

    protected processGetBookFile(response: HttpResponseBase): Observable<FilesFileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FilesFileResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Get's book cover's file
     * @param fileName (optional) @gotags: validate:"required" example:"bible-231125.epub"

    Name of file to find with extension
     * @return A successful response.
     */
    getBookCover(fileName: string | null | undefined): Observable<FilesFileResponse> {
        let url_ = this.baseUrl + "/api/v1/files/cover?";
        if (fileName !== undefined && fileName !== null)
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetBookCover(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookCover(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FilesFileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FilesFileResponse>;
        }));
    }

    protected processGetBookCover(response: HttpResponseBase): Observable<FilesFileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FilesFileResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }
}

@Injectable({
    providedIn: 'root'
})
export class GenreClient extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Get category or genre by query
     * @param query (optional) query to find. can be hex id or translit name

    @gotags: form:"query" validate:"required"
     * @return A successful response.
     */
    getOneOf(query: string | null | undefined): Observable<GenresGetCategoryOrGenreResponse> {
        let url_ = this.baseUrl + "/api/v1/genre?";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetOneOf(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOneOf(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GenresGetCategoryOrGenreResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GenresGetCategoryOrGenreResponse>;
        }));
    }

    protected processGetOneOf(response: HttpResponseBase): Observable<GenresGetCategoryOrGenreResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GenresGetCategoryOrGenreResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Get all categories and genres list
     * @return A successful response.
     */
    getAll(): Observable<GenresGetAllResponse> {
        let url_ = this.baseUrl + "/api/v1/genre/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GenresGetAllResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GenresGetAllResponse>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<GenresGetAllResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GenresGetAllResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Get whole tree
     * @param query (optional) query to find. can be hex id or translit name

    @gotags: form:"query" validate:"required"
     * @return A successful response.
     */
    getTree(query: string | null | undefined): Observable<GenresCategoryResponse> {
        let url_ = this.baseUrl + "/api/v1/genre/tree?";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetTree(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTree(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GenresCategoryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GenresCategoryResponse>;
        }));
    }

    protected processGetTree(response: HttpResponseBase): Observable<GenresCategoryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GenresCategoryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }
}

@Injectable({
    providedIn: 'root'
})
export class ReviewClient extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Adds new review to book
     * @return A successful response.
     */
    createBookReview(body: ReviewsCreateBookReviewRequest): Observable<ReviewsCreateBookReviewResponse> {
        let url_ = this.baseUrl + "/api/v1/review/book";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateBookReview(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateBookReview(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReviewsCreateBookReviewResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReviewsCreateBookReviewResponse>;
        }));
    }

    protected processCreateBookReview(response: HttpResponseBase): Observable<ReviewsCreateBookReviewResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReviewsCreateBookReviewResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Get reviews of book with provided {id}
     * @param id Book ID to search reviews of

    @gotags: form:"id" validate:"required,primitiveid"
     * @param page (optional) Page number to search

    @gotags: form:"page" validate:"gte=0"
     * @param pageSize (optional) Reviews count per page

    @gotags: form:"pagesize" validate:"gte=1"
     * @return A successful response.
     */
    getBookReviews(id: string, page: number | null | undefined, pageSize: number | null | undefined): Observable<ReviewsGetBookReviewsResponse> {
        let url_ = this.baseUrl + "/api/v1/review/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (page !== undefined && page !== null)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetBookReviews(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookReviews(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReviewsGetBookReviewsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReviewsGetBookReviewsResponse>;
        }));
    }

    protected processGetBookReviews(response: HttpResponseBase): Observable<ReviewsGetBookReviewsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReviewsGetBookReviewsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }
}

@Injectable({
    providedIn: 'root'
})
export class UserClient extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Search user
     * @param id (optional) @gotags: validate:"primitiveid,required_without_all=Login Email" form:"id"
     * @param login (optional) @gotags: validate:"onlyenglish,required_without_all=Id Email" form:"login"
     * @param email (optional) @gotags: validate:"required_without_all=Id Login" form:"email"
     * @return A successful response.
     */
    getUser(id: string | null | undefined, login: string | null | undefined, email: string | null | undefined): Observable<UsersUserModel> {
        let url_ = this.baseUrl + "/api/v1/users?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (login !== undefined && login !== null)
            url_ += "login=" + encodeURIComponent("" + login) + "&";
        if (email !== undefined && email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsersUserModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsersUserModel>;
        }));
    }

    protected processGetUser(response: HttpResponseBase): Observable<UsersUserModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsersUserModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Authenticate user
     * @return A successful response.
     */
    auth(body: SharedEmpty): Observable<SharedUserCredentials> {
        let url_ = this.baseUrl + "/api/v1/users/auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAuth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuth(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SharedUserCredentials>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SharedUserCredentials>;
        }));
    }

    protected processAuth(response: HttpResponseBase): Observable<SharedUserCredentials> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SharedUserCredentials.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Login user
     * @return A successful response.
     */
    login(body: UsersLoginRequest): Observable<UsersLoginResponse> {
        let url_ = this.baseUrl + "/api/v1/users/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsersLoginResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsersLoginResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<UsersLoginResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsersLoginResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Logout user
     * @return A successful response.
     */
    logout(body: SharedEmpty): Observable<SharedEmpty> {
        let url_ = this.baseUrl + "/api/v1/users/logout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SharedEmpty>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SharedEmpty>;
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<SharedEmpty> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SharedEmpty.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * Register user
     * @return A successful response.
     */
    registerUser(body: UsersRegistrationRequest): Observable<UsersLoginResponse> {
        let url_ = this.baseUrl + "/api/v1/users/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRegisterUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsersLoginResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsersLoginResponse>;
        }));
    }

    protected processRegisterUser(response: HttpResponseBase): Observable<UsersLoginResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsersLoginResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = RpcStatus.fromJS(resultDatadefault);
            return throwException("An unexpected error response.", status, _responseText, _headers, resultdefault);
            }));
        }
    }
}

export class AuthorsAuthorModel implements IAuthorsAuthorModel {
    about?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    profilepicture?: string | undefined;
    rating?: number | undefined;
    translitname?: string | undefined;

    constructor(data?: IAuthorsAuthorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.about = _data["about"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.profilepicture = _data["profilepicture"];
            this.rating = _data["rating"];
            this.translitname = _data["translitname"];
        }
    }

    static fromJS(data: any): AuthorsAuthorModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorsAuthorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["about"] = this.about;
        data["id"] = this.id;
        data["name"] = this.name;
        data["profilepicture"] = this.profilepicture;
        data["rating"] = this.rating;
        data["translitname"] = this.translitname;
        return data;
    }
}

export interface IAuthorsAuthorModel {
    about?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    profilepicture?: string | undefined;
    rating?: number | undefined;
    translitname?: string | undefined;
}

export class AuthorsGetAuthorsResponse implements IAuthorsGetAuthorsResponse {
    authors?: AuthorsAuthorModel[] | undefined;

    constructor(data?: IAuthorsGetAuthorsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["authors"])) {
                this.authors = [] as any;
                for (let item of _data["authors"])
                    this.authors!.push(AuthorsAuthorModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AuthorsGetAuthorsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorsGetAuthorsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.authors)) {
            data["authors"] = [];
            for (let item of this.authors)
                data["authors"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAuthorsGetAuthorsResponse {
    authors?: AuthorsAuthorModel[] | undefined;
}

export class BooksBookModel implements IBooksBookModel {
    authors?: AuthorsAuthorModel[] | undefined;
    category?: GenresCategoryModel | undefined;
    description?: string | undefined;
    filepath?: string | undefined;
    genre?: GenresGenreModel | undefined;
    id?: string | undefined;
    name?: string | undefined;
    pages?: number | undefined;
    picture?: string | undefined;
    price?: number | undefined;
    published?: string | undefined;
    rating?: number | undefined;
    reviews?: number | undefined;
    translitname?: string | undefined;
    written?: number | undefined;

    constructor(data?: IBooksBookModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["authors"])) {
                this.authors = [] as any;
                for (let item of _data["authors"])
                    this.authors!.push(AuthorsAuthorModel.fromJS(item));
            }
            this.category = _data["category"] ? GenresCategoryModel.fromJS(_data["category"]) : <any>undefined;
            this.description = _data["description"];
            this.filepath = _data["filepath"];
            this.genre = _data["genre"] ? GenresGenreModel.fromJS(_data["genre"]) : <any>undefined;
            this.id = _data["id"];
            this.name = _data["name"];
            this.pages = _data["pages"];
            this.picture = _data["picture"];
            this.price = _data["price"];
            this.published = _data["published"];
            this.rating = _data["rating"];
            this.reviews = _data["reviews"];
            this.translitname = _data["translitname"];
            this.written = _data["written"];
        }
    }

    static fromJS(data: any): BooksBookModel {
        data = typeof data === 'object' ? data : {};
        let result = new BooksBookModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.authors)) {
            data["authors"] = [];
            for (let item of this.authors)
                data["authors"].push(item.toJSON());
        }
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["filepath"] = this.filepath;
        data["genre"] = this.genre ? this.genre.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["name"] = this.name;
        data["pages"] = this.pages;
        data["picture"] = this.picture;
        data["price"] = this.price;
        data["published"] = this.published;
        data["rating"] = this.rating;
        data["reviews"] = this.reviews;
        data["translitname"] = this.translitname;
        data["written"] = this.written;
        return data;
    }
}

export interface IBooksBookModel {
    authors?: AuthorsAuthorModel[] | undefined;
    category?: GenresCategoryModel | undefined;
    description?: string | undefined;
    filepath?: string | undefined;
    genre?: GenresGenreModel | undefined;
    id?: string | undefined;
    name?: string | undefined;
    pages?: number | undefined;
    picture?: string | undefined;
    price?: number | undefined;
    published?: string | undefined;
    rating?: number | undefined;
    reviews?: number | undefined;
    translitname?: string | undefined;
    written?: number | undefined;
}

export class BooksCreateBookRequest implements IBooksCreateBookRequest {
    /** @gotags: validate:"required,primitiveid" form:"Authors" */
    authors?: string[] | undefined;
    /** @gotags: validate:"required,min=16,max=1024" form:"Description" */
    description?: string | undefined;
    /** @gotags: validate:"required" form:"Book" */
    filepath?: string | undefined;
    /** @gotags: validate:"required,primitiveid" form:"Genre" */
    genre?: string | undefined;
    /** @gotags: validate:"required,min=4,max=64" form:"Name" */
    name?: string | undefined;
    /** @gotags: validate:"required" form:"Picture" */
    picture?: string | undefined;
    price?: number | undefined;

    constructor(data?: IBooksCreateBookRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["authors"])) {
                this.authors = [] as any;
                for (let item of _data["authors"])
                    this.authors!.push(item);
            }
            this.description = _data["description"];
            this.filepath = _data["filepath"];
            this.genre = _data["genre"];
            this.name = _data["name"];
            this.picture = _data["picture"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): BooksCreateBookRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BooksCreateBookRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.authors)) {
            data["authors"] = [];
            for (let item of this.authors)
                data["authors"].push(item);
        }
        data["description"] = this.description;
        data["filepath"] = this.filepath;
        data["genre"] = this.genre;
        data["name"] = this.name;
        data["picture"] = this.picture;
        data["price"] = this.price;
        return data;
    }
}

export interface IBooksCreateBookRequest {
    /** @gotags: validate:"required,primitiveid" form:"Authors" */
    authors?: string[] | undefined;
    /** @gotags: validate:"required,min=16,max=1024" form:"Description" */
    description?: string | undefined;
    /** @gotags: validate:"required" form:"Book" */
    filepath?: string | undefined;
    /** @gotags: validate:"required,primitiveid" form:"Genre" */
    genre?: string | undefined;
    /** @gotags: validate:"required,min=4,max=64" form:"Name" */
    name?: string | undefined;
    /** @gotags: validate:"required" form:"Picture" */
    picture?: string | undefined;
    price?: number | undefined;
}

export class BooksCreateBookResponse implements IBooksCreateBookResponse {
    book?: BooksBookModel | undefined;

    constructor(data?: IBooksCreateBookResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.book = _data["book"] ? BooksBookModel.fromJS(_data["book"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BooksCreateBookResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BooksCreateBookResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["book"] = this.book ? this.book.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBooksCreateBookResponse {
    book?: BooksBookModel | undefined;
}

export class BooksFindBookResponse implements IBooksFindBookResponse {
    books?: BooksBookModel[] | undefined;

    constructor(data?: IBooksFindBookResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["books"])) {
                this.books = [] as any;
                for (let item of _data["books"])
                    this.books!.push(BooksBookModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BooksFindBookResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BooksFindBookResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.books)) {
            data["books"] = [];
            for (let item of this.books)
                data["books"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBooksFindBookResponse {
    books?: BooksBookModel[] | undefined;
}

export class BooksGetBookByGenreResponse implements IBooksGetBookByGenreResponse {
    books?: BooksBookModel[] | undefined;

    constructor(data?: IBooksGetBookByGenreResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["books"])) {
                this.books = [] as any;
                for (let item of _data["books"])
                    this.books!.push(BooksBookModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BooksGetBookByGenreResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BooksGetBookByGenreResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.books)) {
            data["books"] = [];
            for (let item of this.books)
                data["books"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBooksGetBookByGenreResponse {
    books?: BooksBookModel[] | undefined;
}

export class BooksGetBookListResponse implements IBooksGetBookListResponse {
    books?: BooksBookModel[] | undefined;

    constructor(data?: IBooksGetBookListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["books"])) {
                this.books = [] as any;
                for (let item of _data["books"])
                    this.books!.push(BooksBookModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BooksGetBookListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BooksGetBookListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.books)) {
            data["books"] = [];
            for (let item of this.books)
                data["books"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBooksGetBookListResponse {
    books?: BooksBookModel[] | undefined;
}

export class BooksGetBookResponse implements IBooksGetBookResponse {
    book?: BooksBookModel | undefined;

    constructor(data?: IBooksGetBookResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.book = _data["book"] ? BooksBookModel.fromJS(_data["book"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BooksGetBookResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BooksGetBookResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["book"] = this.book ? this.book.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBooksGetBookResponse {
    book?: BooksBookModel | undefined;
}

export class FilesFileResponse implements IFilesFileResponse {
    file?: string | undefined;
    mimetype?: string | undefined;

    constructor(data?: IFilesFileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.file = _data["file"];
            this.mimetype = _data["mimetype"];
        }
    }

    static fromJS(data: any): FilesFileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FilesFileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["file"] = this.file;
        data["mimetype"] = this.mimetype;
        return data;
    }
}

export interface IFilesFileResponse {
    file?: string | undefined;
    mimetype?: string | undefined;
}

export class GenresCategoryModel implements IGenresCategoryModel {
    genres?: GenresGenreModel[] | undefined;
    id?: string | undefined;
    name?: string | undefined;
    translitname?: string | undefined;

    constructor(data?: IGenresCategoryModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(GenresGenreModel.fromJS(item));
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.translitname = _data["translitname"];
        }
    }

    static fromJS(data: any): GenresCategoryModel {
        data = typeof data === 'object' ? data : {};
        let result = new GenresCategoryModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["translitname"] = this.translitname;
        return data;
    }
}

export interface IGenresCategoryModel {
    genres?: GenresGenreModel[] | undefined;
    id?: string | undefined;
    name?: string | undefined;
    translitname?: string | undefined;
}

export class GenresCategoryResponse implements IGenresCategoryResponse {
    category?: GenresCategoryModel | undefined;

    constructor(data?: IGenresCategoryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"] ? GenresCategoryModel.fromJS(_data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GenresCategoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GenresCategoryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGenresCategoryResponse {
    category?: GenresCategoryModel | undefined;
}

export class GenresGenreModel implements IGenresGenreModel {
    bookcount?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    translitname?: string | undefined;

    constructor(data?: IGenresGenreModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bookcount = _data["bookcount"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.translitname = _data["translitname"];
        }
    }

    static fromJS(data: any): GenresGenreModel {
        data = typeof data === 'object' ? data : {};
        let result = new GenresGenreModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookcount"] = this.bookcount;
        data["id"] = this.id;
        data["name"] = this.name;
        data["translitname"] = this.translitname;
        return data;
    }
}

export interface IGenresGenreModel {
    bookcount?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    translitname?: string | undefined;
}

export class GenresGetAllResponse implements IGenresGetAllResponse {
    categories?: GenresCategoryModel[] | undefined;

    constructor(data?: IGenresGetAllResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(GenresCategoryModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GenresGetAllResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GenresGetAllResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGenresGetAllResponse {
    categories?: GenresCategoryModel[] | undefined;
}

export class GenresGetCategoryOrGenreResponse implements IGenresGetCategoryOrGenreResponse {
    category?: GenresCategoryModel | undefined;
    genre?: GenresGenreModel | undefined;

    constructor(data?: IGenresGetCategoryOrGenreResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"] ? GenresCategoryModel.fromJS(_data["category"]) : <any>undefined;
            this.genre = _data["genre"] ? GenresGenreModel.fromJS(_data["genre"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GenresGetCategoryOrGenreResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GenresGetCategoryOrGenreResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        data["genre"] = this.genre ? this.genre.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGenresGetCategoryOrGenreResponse {
    category?: GenresCategoryModel | undefined;
    genre?: GenresGenreModel | undefined;
}

export class ProtobufAny implements IProtobufAny {
    type?: string | undefined;

    [key: string]: any;

    constructor(data?: IProtobufAny) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["@type"];
        }
    }

    static fromJS(data: any): ProtobufAny {
        data = typeof data === 'object' ? data : {};
        let result = new ProtobufAny();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["@type"] = this.type;
        return data;
    }
}

export interface IProtobufAny {
    type?: string | undefined;

    [key: string]: any;
}

export class ReviewsCreateBookReviewRequest implements IReviewsCreateBookReviewRequest {
    creatorId?: string | undefined;
    modelId?: string | undefined;
    rating?: number | undefined;
    text?: string | undefined;

    constructor(data?: IReviewsCreateBookReviewRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.creatorId = _data["creatorId"];
            this.modelId = _data["modelId"];
            this.rating = _data["rating"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): ReviewsCreateBookReviewRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewsCreateBookReviewRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["creatorId"] = this.creatorId;
        data["modelId"] = this.modelId;
        data["rating"] = this.rating;
        data["text"] = this.text;
        return data;
    }
}

export interface IReviewsCreateBookReviewRequest {
    creatorId?: string | undefined;
    modelId?: string | undefined;
    rating?: number | undefined;
    text?: string | undefined;
}

export class ReviewsCreateBookReviewResponse implements IReviewsCreateBookReviewResponse {
    review?: ReviewsReviewModel | undefined;

    constructor(data?: IReviewsCreateBookReviewResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.review = _data["review"] ? ReviewsReviewModel.fromJS(_data["review"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ReviewsCreateBookReviewResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewsCreateBookReviewResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["review"] = this.review ? this.review.toJSON() : <any>undefined;
        return data;
    }
}

export interface IReviewsCreateBookReviewResponse {
    review?: ReviewsReviewModel | undefined;
}

export class ReviewsGetBookReviewsResponse implements IReviewsGetBookReviewsResponse {
    reviews?: ReviewsReviewModel[] | undefined;

    constructor(data?: IReviewsGetBookReviewsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["reviews"])) {
                this.reviews = [] as any;
                for (let item of _data["reviews"])
                    this.reviews!.push(ReviewsReviewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReviewsGetBookReviewsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewsGetBookReviewsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.reviews)) {
            data["reviews"] = [];
            for (let item of this.reviews)
                data["reviews"].push(item.toJSON());
        }
        return data;
    }
}

export interface IReviewsGetBookReviewsResponse {
    reviews?: ReviewsReviewModel[] | undefined;
}

export class ReviewsReviewModel implements IReviewsReviewModel {
    created?: string | undefined;
    creator?: ReviewsUserModel | undefined;
    downvotes?: number | undefined;
    id?: string | undefined;
    rating?: number | undefined;
    text?: string | undefined;
    upvotes?: number | undefined;
    userAction?: ReviewsUserActionEnum | undefined;

    constructor(data?: IReviewsReviewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.created = _data["created"];
            this.creator = _data["creator"] ? ReviewsUserModel.fromJS(_data["creator"]) : <any>undefined;
            this.downvotes = _data["downvotes"];
            this.id = _data["id"];
            this.rating = _data["rating"];
            this.text = _data["text"];
            this.upvotes = _data["upvotes"];
            this.userAction = _data["userAction"];
        }
    }

    static fromJS(data: any): ReviewsReviewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewsReviewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created;
        data["creator"] = this.creator ? this.creator.toJSON() : <any>undefined;
        data["downvotes"] = this.downvotes;
        data["id"] = this.id;
        data["rating"] = this.rating;
        data["text"] = this.text;
        data["upvotes"] = this.upvotes;
        data["userAction"] = this.userAction;
        return data;
    }
}

export interface IReviewsReviewModel {
    created?: string | undefined;
    creator?: ReviewsUserModel | undefined;
    downvotes?: number | undefined;
    id?: string | undefined;
    rating?: number | undefined;
    text?: string | undefined;
    upvotes?: number | undefined;
    userAction?: ReviewsUserActionEnum | undefined;
}

export enum ReviewsUserActionEnum {
    NoAction = "noAction",
    Like = "like",
    Dislike = "dislike",
}

export class ReviewsUserModel implements IReviewsUserModel {
    id?: string | undefined;
    login?: string | undefined;

    constructor(data?: IReviewsUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
        }
    }

    static fromJS(data: any): ReviewsUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewsUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        return data;
    }
}

export interface IReviewsUserModel {
    id?: string | undefined;
    login?: string | undefined;
}

export class RpcStatus implements IRpcStatus {
    code?: number | undefined;
    details?: ProtobufAny[] | undefined;
    message?: string | undefined;

    constructor(data?: IRpcStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(ProtobufAny.fromJS(item));
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): RpcStatus {
        data = typeof data === 'object' ? data : {};
        let result = new RpcStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IRpcStatus {
    code?: number | undefined;
    details?: ProtobufAny[] | undefined;
    message?: string | undefined;
}

export class SharedEmpty implements ISharedEmpty {

    constructor(data?: ISharedEmpty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SharedEmpty {
        data = typeof data === 'object' ? data : {};
        let result = new SharedEmpty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISharedEmpty {
}

export class SharedUserCredentials implements ISharedUserCredentials {
    id?: string | undefined;
    login?: string | undefined;
    roles?: string[] | undefined;

    constructor(data?: ISharedUserCredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): SharedUserCredentials {
        data = typeof data === 'object' ? data : {};
        let result = new SharedUserCredentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface ISharedUserCredentials {
    id?: string | undefined;
    login?: string | undefined;
    roles?: string[] | undefined;
}

export class UsersLoginRequest implements IUsersLoginRequest {
    /** Can be presented as login or email */
    login?: string | undefined;
    password?: string | undefined;
    rememberMe?: boolean | undefined;

    constructor(data?: IUsersLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
            this.rememberMe = _data["rememberMe"];
        }
    }

    static fromJS(data: any): UsersLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UsersLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        data["rememberMe"] = this.rememberMe;
        return data;
    }
}

export interface IUsersLoginRequest {
    /** Can be presented as login or email */
    login?: string | undefined;
    password?: string | undefined;
    rememberMe?: boolean | undefined;
}

export class UsersLoginResponse implements IUsersLoginResponse {
    id?: string | undefined;
    login?: string | undefined;
    refreshtoken?: string | undefined;
    roles?: string[] | undefined;
    token?: string | undefined;

    constructor(data?: IUsersLoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.refreshtoken = _data["refreshtoken"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): UsersLoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UsersLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["refreshtoken"] = this.refreshtoken;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["token"] = this.token;
        return data;
    }
}

export interface IUsersLoginResponse {
    id?: string | undefined;
    login?: string | undefined;
    refreshtoken?: string | undefined;
    roles?: string[] | undefined;
    token?: string | undefined;
}

export class UsersRegistrationRequest implements IUsersRegistrationRequest {
    email?: string | undefined;
    login?: string | undefined;
    password?: string | undefined;
    passwordRepeat?: string | undefined;
    rememberMe?: boolean | undefined;

    constructor(data?: IUsersRegistrationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.login = _data["login"];
            this.password = _data["password"];
            this.passwordRepeat = _data["passwordRepeat"];
            this.rememberMe = _data["rememberMe"];
        }
    }

    static fromJS(data: any): UsersRegistrationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UsersRegistrationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["login"] = this.login;
        data["password"] = this.password;
        data["passwordRepeat"] = this.passwordRepeat;
        data["rememberMe"] = this.rememberMe;
        return data;
    }
}

export interface IUsersRegistrationRequest {
    email?: string | undefined;
    login?: string | undefined;
    password?: string | undefined;
    passwordRepeat?: string | undefined;
    rememberMe?: boolean | undefined;
}

export class UsersTokenReply implements IUsersTokenReply {
    refreshtoken?: string | undefined;
    token?: string | undefined;

    constructor(data?: IUsersTokenReply) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refreshtoken = _data["refreshtoken"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): UsersTokenReply {
        data = typeof data === 'object' ? data : {};
        let result = new UsersTokenReply();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refreshtoken"] = this.refreshtoken;
        data["token"] = this.token;
        return data;
    }
}

export interface IUsersTokenReply {
    refreshtoken?: string | undefined;
    token?: string | undefined;
}

export class UsersUserModel implements IUsersUserModel {
    email?: string | undefined;
    id?: string | undefined;
    login?: string | undefined;
    roles?: string[] | undefined;

    constructor(data?: IUsersUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.id = _data["id"];
            this.login = _data["login"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UsersUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UsersUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["id"] = this.id;
        data["login"] = this.login;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IUsersUserModel {
    email?: string | undefined;
    id?: string | undefined;
    login?: string | undefined;
    roles?: string[] | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}